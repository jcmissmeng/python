第十七天
第十课：
		多进程
		Process类常用方法：
			is_alive():判断进程实例是否还在执行
			join([timeout]):是否等待进程实例执行结束，或等待多少秒
			start():启动进程实例（创建子进程）
			run():如果没有给定target参数，对这个对象调用start()方法时，就执行对象中的run方法
			terminate():不管任务是否完成，立即终止
		Process类常用属性：
			name:当前进程实例别名，默认为Process-N
			pid:当前进程实例的PID值
第十八天
第二课：
		继承Process实现进程
第三课：
		进程池  
		multiprocessing.Pool常用函数解析：
			apply_async(func[,arg[,kwds]]):使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表
			apply(func[,arg[,kwds]]):使用阻塞方式调用func
			close():关闭Pool，使其不再接受新的任务
			terminate():不管任务是否完成，立即终止
			join():主进程阻塞，等待子进程的退出，必须在close或terminate之后使用
第四课：
		进程间通信
			使用全局变量是不可以进行进程间通信的
第五课：
		使用multiprocessing模块的队列Queue进行进程间通信
		初始化Queue对象时（例：q=Queue()），若括号中没有指定最大可接受的消息数量，或数量为负值，那么就代表可接受的数量没有上限
			Queue.qsize():返回当前队列包含的消息数量
			Queue.empty():如果队列为空，返回True,反之False
			Queue.full():如果队列满了,返回True，反之False
			Queue.get([block[,timeout]]):获取队列中的一条消息，然后将其从队列中移除，block默认True
				如果block使用默认值，且没有设置timeout（秒），消息为空，此程序将停在读取状态，直到读取到消息，
				如果设置timeout，则会等待timeout，若还没读取到，则抛出"Queue.Empty"异常
				如果block为False,消息队列为空，则立即抛出“Queue.Empty”异常
			Queue.get_nowait():相当于Queue.get(False)
			Queue.put(item[,block[,timeout]]):将item消息写入队列，block默认True
				如果block默认，无timeout，消息队列如果没有空间写入，此时程序将被阻塞（停在写入状态），直到有空间写入为止
				如果设置timeout，则会等待timeout秒,若还没空间，则抛出"Queue.Full"异常
				如果block为False，消息队列如果没有空间写入，立即抛出"Queue.Full"异常
			Queue.put_nowait(item):相当于Queue.put(item,False)
			
第六课：
		进程池应使用multiprocessing.Manager()中的Queue()，否则会报错RuntimeError
第七课：
		多线程
			threading模块是对thread做了一些封装
第十课：
		线程共享全局变量
第二课：
		
第二课：
		
第二课：
		
第二课：
		
第二课：
		
第二课：
		
第二课：
		
第二课：
		
